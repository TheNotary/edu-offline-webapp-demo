{"version":3,"sources":["jsdelivr-header.js","/npm/idb-keyval@6.2.0/dist/index.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,ACNA,SAAS,EAAiB,GACtB,OAAO,IAAI,SAAQ,CAAC,EAAS,KAEzB,EAAQ,WAAa,EAAQ,UAAY,IAAM,EAAQ,EAAQ,QAE/D,EAAQ,QAAU,EAAQ,QAAU,IAAM,EAAO,EAAQ,UAGjE,SAAS,EAAY,EAAQ,GACzB,MAAM,EAAU,UAAU,KAAK,GAC/B,EAAQ,gBAAkB,IAAM,EAAQ,OAAO,kBAAkB,GACjE,MAAM,EAAM,EAAiB,GAC7B,MAAO,CAAC,EAAQ,IAAa,EAAI,MAAM,GAAO,EAAS,EAAG,YAAY,EAAW,GAAQ,YAAY,MAEzG,IAAI,EACJ,SAAS,IAIL,OAHK,IACD,EAAsB,EAAY,eAAgB,WAE/C,EAQX,SAAS,EAAI,EAAK,EAAc,KAC5B,OAAO,EAAY,YAAa,GAAU,EAAiB,EAAM,IAAI,MASzE,SAAS,EAAI,EAAK,EAAO,EAAc,KACnC,OAAO,EAAY,aAAc,IAC7B,EAAM,IAAI,EAAO,GACV,EAAiB,EAAM,gBAUtC,SAAS,EAAQ,EAAS,EAAc,KACpC,OAAO,EAAY,aAAc,IAC7B,EAAQ,SAAS,GAAU,EAAM,IAAI,EAAM,GAAI,EAAM,MAC9C,EAAiB,EAAM,gBAStC,SAAS,EAAQ,EAAM,EAAc,KACjC,OAAO,EAAY,YAAa,GAAU,QAAQ,IAAI,EAAK,KAAK,GAAQ,EAAiB,EAAM,IAAI,SASvG,SAAS,EAAO,EAAK,EAAS,EAAc,KACxC,OAAO,EAAY,aAAc,GAIjC,IAAI,SAAQ,CAAC,EAAS,KAClB,EAAM,IAAI,GAAK,UAAY,WACvB,IACI,EAAM,IAAI,EAAQ,KAAK,QAAS,GAChC,EAAQ,EAAiB,EAAM,cAEnC,MAAO,GACH,EAAO,UAWvB,SAAS,EAAI,EAAK,EAAc,KAC5B,OAAO,EAAY,aAAc,IAC7B,EAAM,OAAO,GACN,EAAiB,EAAM,gBAStC,SAAS,EAAQ,EAAM,EAAc,KACjC,OAAO,EAAY,aAAc,IAC7B,EAAK,SAAS,GAAQ,EAAM,OAAO,KAC5B,EAAiB,EAAM,gBAQtC,SAAS,EAAM,EAAc,KACzB,OAAO,EAAY,aAAc,IAC7B,EAAM,QACC,EAAiB,EAAM,gBAGtC,SAAS,EAAW,EAAO,GAOvB,OANA,EAAM,aAAa,UAAY,WACtB,KAAK,SAEV,EAAS,KAAK,QACd,KAAK,OAAO,aAET,EAAiB,EAAM,aAOlC,SAAS,EAAK,EAAc,KACxB,OAAO,EAAY,YAAa,IAE5B,GAAI,EAAM,WACN,OAAO,EAAiB,EAAM,cAElC,MAAM,EAAQ,GACd,OAAO,EAAW,GAAQ,GAAW,EAAM,KAAK,EAAO,OAAM,MAAK,IAAM,OAQhF,SAAS,EAAO,EAAc,KAC1B,OAAO,EAAY,YAAa,IAE5B,GAAI,EAAM,OACN,OAAO,EAAiB,EAAM,UAElC,MAAM,EAAQ,GACd,OAAO,EAAW,GAAQ,GAAW,EAAM,KAAK,EAAO,SAAQ,MAAK,IAAM,OAQlF,SAAS,EAAQ,EAAc,KAC3B,OAAO,EAAY,YAAa,IAG5B,GAAI,EAAM,QAAU,EAAM,WACtB,OAAO,QAAQ,IAAI,CACf,EAAiB,EAAM,cACvB,EAAiB,EAAM,YACxB,MAAK,EAAE,EAAM,KAAY,EAAK,KAAI,CAAC,EAAK,IAAM,CAAC,EAAK,EAAO,QAElE,MAAM,EAAQ,GACd,OAAO,EAAY,YAAa,GAAU,EAAW,GAAQ,GAAW,EAAM,KAAK,CAAC,EAAO,IAAK,EAAO,UAAS,MAAK,IAAM","file":"/npm/idb-keyval@6.2.0/dist/index.js/+esm","sourceRoot":"","sourcesContent":["/**\n * Bundled by jsDelivr using Rollup v2.72.1 and Terser v5.13.1.\n * Original file: /npm/idb-keyval@6.2.0/dist/index.js\n *\n * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files\n */\n","function promisifyRequest(request) {\n    return new Promise((resolve, reject) => {\n        // @ts-ignore - file size hacks\n        request.oncomplete = request.onsuccess = () => resolve(request.result);\n        // @ts-ignore - file size hacks\n        request.onabort = request.onerror = () => reject(request.error);\n    });\n}\nfunction createStore(dbName, storeName) {\n    const request = indexedDB.open(dbName);\n    request.onupgradeneeded = () => request.result.createObjectStore(storeName);\n    const dbp = promisifyRequest(request);\n    return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));\n}\nlet defaultGetStoreFunc;\nfunction defaultGetStore() {\n    if (!defaultGetStoreFunc) {\n        defaultGetStoreFunc = createStore('keyval-store', 'keyval');\n    }\n    return defaultGetStoreFunc;\n}\n/**\n * Get a value by its key.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction get(key, customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => promisifyRequest(store.get(key)));\n}\n/**\n * Set a value with a key.\n *\n * @param key\n * @param value\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction set(key, value, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.put(value, key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Set multiple values at once. This is faster than calling set() multiple times.\n * It's also atomic â€“ if one of the pairs can't be added, none will be added.\n *\n * @param entries Array of entries, where each entry is an array of `[key, value]`.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction setMany(entries, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        entries.forEach((entry) => store.put(entry[1], entry[0]));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Get multiple values by their keys\n *\n * @param keys\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction getMany(keys, customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => Promise.all(keys.map((key) => promisifyRequest(store.get(key)))));\n}\n/**\n * Update a value. This lets you see the old value and update it as an atomic operation.\n *\n * @param key\n * @param updater A callback that takes the old value and returns a new value.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction update(key, updater, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => \n    // Need to create the promise manually.\n    // If I try to chain promises, the transaction closes in browsers\n    // that use a promise polyfill (IE10/11).\n    new Promise((resolve, reject) => {\n        store.get(key).onsuccess = function () {\n            try {\n                store.put(updater(this.result), key);\n                resolve(promisifyRequest(store.transaction));\n            }\n            catch (err) {\n                reject(err);\n            }\n        };\n    }));\n}\n/**\n * Delete a particular key from the store.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction del(key, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.delete(key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Delete multiple keys at once.\n *\n * @param keys List of keys to delete.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction delMany(keys, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        keys.forEach((key) => store.delete(key));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Clear all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction clear(customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.clear();\n        return promisifyRequest(store.transaction);\n    });\n}\nfunction eachCursor(store, callback) {\n    store.openCursor().onsuccess = function () {\n        if (!this.result)\n            return;\n        callback(this.result);\n        this.result.continue();\n    };\n    return promisifyRequest(store.transaction);\n}\n/**\n * Get all keys in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction keys(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        if (store.getAllKeys) {\n            return promisifyRequest(store.getAllKeys());\n        }\n        const items = [];\n        return eachCursor(store, (cursor) => items.push(cursor.key)).then(() => items);\n    });\n}\n/**\n * Get all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction values(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        if (store.getAll) {\n            return promisifyRequest(store.getAll());\n        }\n        const items = [];\n        return eachCursor(store, (cursor) => items.push(cursor.value)).then(() => items);\n    });\n}\n/**\n * Get all entries in the store. Each entry is an array of `[key, value]`.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction entries(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        // (although, hopefully we'll get a simpler path some day)\n        if (store.getAll && store.getAllKeys) {\n            return Promise.all([\n                promisifyRequest(store.getAllKeys()),\n                promisifyRequest(store.getAll()),\n            ]).then(([keys, values]) => keys.map((key, i) => [key, values[i]]));\n        }\n        const items = [];\n        return customStore('readonly', (store) => eachCursor(store, (cursor) => items.push([cursor.key, cursor.value])).then(() => items));\n    });\n}\n\nexport { clear, createStore, del, delMany, entries, get, getMany, keys, promisifyRequest, set, setMany, update, values };\n"]}